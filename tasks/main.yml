---

- name: load platform specific variables
  include_vars: "{{ item }}"
  loop: "{{ query('first_found', params, errors='ignore') }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        - "{{ ansible_system }}.yml"
      paths:
        - '{{ role_path }}/vars'

- name: ensure gcc repo presence
  when: ansible_os_family == 'Debian'
  become: true
  apt_repository:
    repo: ppa:ubuntu-toolchain-r/test
    state: present

- name: build and install the GCC
  when: gcc_install_from_source | bool
  vars:
    compiler_args: "{{ compiler_default_args + gcc_source_build_args }}"
  block:
    - name: check prefix existence
      stat:
        path: "{{ compiler_args | select('search', '--prefix=.*') | map('regex_replace','^--prefix=(?P<prefix>.+)$', '\\g<prefix>') | list | last }}/bin"
      register: prefix_path
      changed_when: false

    - include_tasks: build_from_source.yml
      when: not prefix_path.stat.exists

- name: establish binary packages
  become: true
  package:
    name: "{{ '%s-%s' | format(item[0], item[1]) }}"
    state: present
  loop: "{{ ['gcc', 'g++'] | product(gcc_versions) | list }}"

- name: update alternatives
  become: true
  command: "update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-{{ item }} {{ 100 + (item | int) }} --slave /usr/bin/gcc gcc /usr/bin/gcc-{{ item }}"    # noqa 204
  loop: "{{ gcc_versions }}"
  changed_when: false

# does not support slaves!
# - name: update alternatives
#   become: true
#   alternatives:
#     name: "{{ item[0] }}"
#     path: "/usr/bin/{{ item[0] }}-{{ item[1] }}"
#     priority: "{{ 50 + (item[1] | int) }}"
#     link: "/usr/bin/{{ item[0] }}"
#   loop: "{{ ['gcc', 'g++'] | product(gcc_versions) | list }}"
